/* (c) https://github.com/MontiCore/monticore */
plugins {
  id "java"
  id "monticore" version "$mc_version" // MontiCore Plugin
  id "maven-publish"
  id "com.github.johnrengelman.shadow" version "6.0.0"
  id "de.set.ecj" version "1.4.1" // Eclipse compiler as it's much faster than javac
}

description = "Statecharts"
sourceCompatibility = JavaVersion.VERSION_1_8
buildDir = file("$projectDir/target")


def grammarDir = "src/main/grammars"
def grammarOutDir = "$buildDir/generated-sources/mc"
def testGrammarOutDir = "$buildDir/generated-test-sources/mc"

def guava_version = "30.1-jre"
def logback_version = "1.2.3"
def junit_version = "4.13.1"
def commons_cli_version = "1.4"
def antlr_version = '4.7.1'

// configure non-standard source sets
sourceSets {
  main {
    java.srcDirs += ["$grammarOutDir"]
  }
  test {
    java.srcDirs += ["$testGrammarOutDir"]
  }
  grammars {
    resources {
      srcDirs(grammarDir)
      include "**/*.mc4"
    }
  }
}

configurations { grammar }

dependencies {
  grammar ("de.monticore:monticore-grammar:$mc_version") {
    capabilities {
      requireCapability("de.monticore:monticore-grammar-grammars")
    }
  }
  implementation "com.google.guava:guava:$guava_version"
  implementation "de.monticore:monticore-runtime:$mc_version"
  implementation "de.monticore:monticore-grammar:$mc_version"
  implementation "de.se_rwth.commons:se-commons-logging:$mc_version"
  implementation "de.se_rwth.commons:se-commons-utilities:$mc_version"
  implementation group:'org.antlr', name:'antlr4-runtime', version:antlr_version
  implementation group:'de.monticore.lang', name:'cd4analysis', version:mc_version
  implementation "commons-cli:commons-cli:$commons_cli_version"
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
  implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
  implementation "ch.qos.logback:logback-classic:$logback_version"
  testImplementation "junit:junit:$junit_version"
}

repositories {
  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url repo
  }
}

task generate {}

// one task per grammar file
fileTree(grammarDir).matching { include '**/*.mc4'}.each { g ->
  def taskname = "generateGrammar${g.getName().substring(0,g.getName().lastIndexOf('.'))}"
  task  "$taskname" (type: MCTask) {
    
    grammar = g
    outputDir = file grammarOutDir
    def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
    outputs.upToDateWhen { incCheck(grammarIncludingPackage)}
  }
  generate.dependsOn ("$taskname")
}


compileJava.dependsOn generate

// Fixes issue with java plugin in projects without resources
compileTestJava.doFirst { mkdir sourceSets.main.output.resourcesDir }

tasks.withType(Test) {
  maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

tasks.withType(JavaCompile) {
  options.fork = true
  options.encoding = "UTF-8"
  options.deprecation false
  options.warnings = false
  options.headerOutputDirectory.convention(null)
}

// all in one cli-jar
shadowJar {
  manifest {
    attributes "Main-Class": "de.monticore.${archiveBaseName.get().capitalize()}CLI"
  }
  archiveClassifier = "cli"
  archiveFileName = "${archiveBaseName.get().capitalize()}CLI.${archiveExtension.get()}"
  minimize()
}


task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  // Include the results from the 'test' task
  reportOn tasks.withType(Test)
}
java {
//  withJavadocJar()
  withSourcesJar()
  registerFeature('grammars') {
    usingSourceSet(sourceSets.grammars)
  }
}

jar.dependsOn grammarsJar, shadowJar

// configure deployment
publishing {
  // configure what artifacts to publish
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
  repositories.maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
    def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
    url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
  }
}

task buildAll(type: GradleBuild) {
  tasks = [ 'build' ]
}

defaultTasks('build')
