/* (c) https://github.com/MontiCore/monticore */

package de.monticore.umlsc;

/**
 * Grammar Statechart, Version March 8th, 2017
 *
 */
component grammar Statechart extends de.monticore.types.MCBasicTypes, de.monticore.literals.MCCommonLiterals {
  
  /** ASTSCArtifact represents the complete Diagram
    @attribute package          The package declaration of this Statechart
    @attribute importStatements List of imported elements
    @attribute scDefinition
  */
  scope SCArtifact =
    ("package" package:(Name& || ".")+ ";")?
    (MCImportStatement)*
    Statechart EOF;


    /*========================================================================*/
    /*================== INTERFACES AND EXTERNAL SYMBOLS =====================*/
    /*========================================================================*/
    
    /** ASTSCElement represents all Elements of a UML Statechart diagram
    */
    abstract SCElement;
    
    /** ASTSCEvent represents Events of Transitions in a UML Statechart diagram
    */
    abstract SCEvent;
    
    external SCStatements;
    external SCExpression;
    external SCInvariantContent;
    
    
    /*========================================================================*/
    /*============================== GRAMMAR =================================*/
    /*========================================================================*/
    
    /** ASTStatechart represents a UML Statechart diagram
        @attribute completeness  Optional Comleteness of this Statechart diagram
        @attribute stereotype    Optional SCStereotype
        @attribute name          Optional name of this Statechart diagram
        @attribute className     Name of the class modeled with this
                                 Statechart diagram
        @attribute superSC       Name of the Statechart which is refined by this
                                 Statechart
        @attribute sCStates      List of States of this Statechart diagram
        @attribute sCTransitions List of Transitions of this Statechart diagram
    */
    symbol scope Statechart =
        Completeness?
        stereotype:SCStereotype?
        "statechart" Name?
        ("for" className:MCObjectType)?
        ("refines" superSC:MCObjectType)?
        "{"
          ( SCState | SCTransition )*
        "}";
    
    
    /** ASTSCAction represents the general part of do-, entry-, and exit-Actions
        @attribute preCondition  Pre-Condition for this Action
        @attribute SCStatements  Statements of this Action
        @attribute postCondition Post-Condition for this Action
    */
    SCAction = (preCondition:Invariant)?
               (slash:"/" SCStatements?
                 (postCondition:Invariant)?
               )?;
    
    /** ASTSCModifier represents a Modifier for a State
        @attribute stereotype Optional SCStereotpye
        @attribute initial    true if State is initial
        @attribute final      true if State is final
        @attribute local      true if State is local
    */
    SCModifier =
        stereotype:SCStereotype?
        (["initial"] | ["final"] | ["local"])*;
    
    
    /** ASTSCState represents a (hierarchical) State in a UML Statechart diagram
        @attribute completeness        Optional Comleteness of this State
        @attribute sCModifier          Modifier of this State
        @attribute name                Name of this State
        @attribute invariant           Invariant for this State
        @attribute sCEntryAction       entry-Action for this State
        @attribute sCDoAction          do-Action for this State
        @attribute sCExitAction        exit-Action for this State
        @attribute sCStates            List of States included in this State
        @attribute sCTransitions       List of Transitions included in this State
        @attribute sCCode              List of Code-blocks included in this State
        @attribute sCInternTransitions List of Intern Transitions for this State
    */
   symbol SCState =
        Completeness?
        SCModifier
        "state" Name
        (bracket:"{"
            (Invariant)?
            ("entry" entryAction:SCAction)?
            ("do" doAction:SCAction)?
            ("exit" exitAction:SCAction)?
            (
              SCState
              |
              SCTransition
              |
              SCCode
              |
              SCInternTransition
            )*
          "}")?
    ;
    
    
    /** ASTSCInternTransition represents an Intern Transition of a State in a
        UML Statechart diagram
        @attribute SCStereotype       Optional SCStereotype
        @attribute sCTransitionBody   Body of this Transition
    */
    SCInternTransition =
        stereotype:SCStereotype? "->" SCTransitionBody;
    
    
    /** ASTSCTransition represents a Transition between two States in a
        UML Statechart diagram
        @attribute SCStereotype     Optional SCStereotype
        @attribute sourceName       Name of the source of this Transition
        @attribute targetName       Name of the target of this Transition
        @attribute sCTransitionBody Body of this Transition
    */
    SCTransition =
        stereotype:SCStereotype?
        sourceName:Name "->" targetName:Name
        SCTransitionBody?
        ;
    
    /** ASTSCTransitionBody represents the Body of a Transition in a
        UML Statechart diagram
        @attribute preCondition  Pre-Condition of this Transition Body
        @attribute sCEvent       Event for this Transition Body to take place
        @attribute SCStatements    Actions of this Transition Body
        @attribute postCondition Post-Condition of this Transition Body
    */
    SCTransitionBody =
        (preCondition:Invariant)?
        SCEvent? "/"
          ( SCStatements
              (postCondition:Invariant)?
          )?
     ;
    
    
    /** ASTSCMethodOrExceptionCall represents a call of a method or exception
        of a Transition in a UML Statechart diagram
        @attribute name        Name of this method call
        @attribute sCArguments Optional Arguments of this method call
    */
    SCMethodCall extends SCEvent =
        name:MCQualifiedName SCArguments?;
    
    
    /** ASTSCReturnStatement represents a return statement of a Transition
        in a UML Statechart diagram
        @attribute SCExpression Expression of this return statement
    */
    SCReturnStatement extends SCEvent =
        "return"
        ( "(" SCExpression ")" ) ?;
    
    
    /** ASTSCArguments represents Arguments of an Event in a UML Statechart
        diagram
        @attribute SCExpressions Specified Arguments as a list of Expressions
    */
    SCArguments =
        ("(" (SCExpression || "," )* ")");
    
    
    /** ASTSCCode represents user added code to the Statechart diagram or to
        States
        @attribute SCStatements The code added by the user
    */
    SCCode extends SCElement =
        "code" SCStatements;
    
    /** ASTCompleteness indicates completeness of an element
    */
    Completeness =
      complete:["(c)"] | incomplete:["(...)"];
      
 
    /** ASTSCStereotype represents SCStereotypes in a Statechart
   	    @attribute values List of Values of this SCStereotype
  	*/
  	SCStereotype = "<<" value:(SCStereoValue || ",")+ ">>";
    

    /** ASTSCStereoValue represents a Value of a SCStereotype in a Classdiagram
        @attribute name  Name of the SCStereotype-Value
    */
    SCStereoValue = Name ("=" value:String)?;
    
    Invariant =
        "[" content:SCInvariantContent "]";
}
