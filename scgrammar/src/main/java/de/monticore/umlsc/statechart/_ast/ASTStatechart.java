/* (c) https://github.com/MontiCore/monticore */

package de.monticore.umlsc.statechart._ast;

import java.util.List;
import java.util.Optional;

import de.monticore.types.mcbasictypes._ast.ASTMCObjectType;

public class ASTStatechart extends ASTStatechartTOP {
  
  public ASTStatechart() {
    super();
  }
  
  public ASTStatechart(/* generated by template ast.ConstructorParametersDeclaration*/
      Optional<ASTCompleteness> completeness,
      Optional<de.monticore.umlsc.statechart._ast.ASTSCStereotype> stereotype,
      Optional<String> name,
      Optional<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> className,
      Optional<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> superSC,
      java.util.List<de.monticore.umlsc.statechart._ast.ASTSCState> sCStates,
      java.util.List<de.monticore.umlsc.statechart._ast.ASTSCTransition> sCTransitions
  ) {
    super();
  }
  
  public ASTSCState getInitialState() {
    // Search for a state marked as initial
    for (ASTSCState s : getSCStateList()) {
      if (s.getSCModifier().isInitial()) {
        return s;
      }
    }
    // Assert there is a state
    if (getSCStateList().isEmpty()) {
      return null;
    }
    // Default: First state
    return getSCStateList().get(0);
  }
  
}
